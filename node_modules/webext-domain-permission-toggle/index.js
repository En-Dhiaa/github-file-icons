import chromeP from 'webext-polyfill-kinda';
import { patternToRegex } from 'webext-patterns';
import { isBackgroundPage } from 'webext-detect-page';
import { getManifestPermissionsSync } from 'webext-additional-permissions';
import { getTabUrl } from 'webext-tools';
import { executeFunction } from 'webext-content-scripts';
const contextMenuId = 'webext-domain-permission-toggle:add-permission';
let globalOptions;
async function isOriginPermanentlyAllowed(origin) {
    return chromeP.permissions.contains({
        origins: [origin + '/*'],
    });
}
async function updateItem(url) {
    const settings = {
        checked: false,
        enabled: true,
    };
    // No URL means no activeTab, no manifest permission, no granted permission, or no permission possible (chrome://)
    if (url) {
        const origin = new URL(url).origin;
        // Manifest permissions can't be removed; this disables the toggle on those domains
        const manifestPermissions = getManifestPermissionsSync();
        const isDefault = patternToRegex(...manifestPermissions.origins).test(origin);
        settings.enabled = !isDefault;
        // We might have temporary permission as part of `activeTab`, so it needs to be properly checked
        settings.checked = isDefault || await isOriginPermanentlyAllowed(origin);
    }
    chrome.contextMenus.update(contextMenuId, settings);
}
async function togglePermission(tab, toggle) {
    // Don't use non-ASCII characters because Safari breaks the encoding in executeScript.code
    const safariError = 'The browser didn\'t supply any information about the active tab.';
    if (!tab.url && toggle) {
        throw new Error(`Please try again. ${safariError}`);
    }
    if (!tab.url && !toggle) {
        throw new Error(`Couldn't disable the extension on the current tab. ${safariError}`);
    }
    // TODO: Ensure that URL is in `optional_permissions`
    const permissionData = {
        origins: [
            new URL(tab.url).origin + '/*',
        ],
    };
    if (!toggle) {
        void chromeP.permissions.remove(permissionData);
        return;
    }
    const userAccepted = await chromeP.permissions.request(permissionData);
    if (!userAccepted) {
        chrome.contextMenus.update(contextMenuId, {
            checked: false,
        });
        return;
    }
    if (globalOptions.reloadOnSuccess) {
        void executeFunction(tab.id, (message) => {
            if (confirm(message)) {
                location.reload();
            }
        }, globalOptions.reloadOnSuccess);
    }
}
async function handleTabActivated({ tabId }) {
    var _a;
    void updateItem((_a = await getTabUrl(tabId)) !== null && _a !== void 0 ? _a : '');
}
async function handleClick({ checked, menuItemId }, tab) {
    if (menuItemId !== contextMenuId) {
        return;
    }
    try {
        await togglePermission(tab, checked);
    }
    catch (error) {
        if (tab === null || tab === void 0 ? void 0 : tab.id) {
            try {
                await executeFunction(tab.id, 'alert' /* Can't pass a raw native function */, 
                // https://github.com/mozilla/webextension-polyfill/pull/258
                String(error instanceof Error ? error : new Error(error.message)));
            }
            catch {
                alert(error); // One last attempt
            }
            void updateItem();
        }
        throw error;
    }
}
/**
 * Adds an item to the browser action icon's context menu.
 * The user can access this menu by right clicking the icon. If your extension doesn't have any action or
 * popup assigned to the icon, it will also appear with a left click.
 *
 * @param options {Options}
 */
export default function addDomainPermissionToggle(options) {
    if (!isBackgroundPage()) {
        throw new Error('webext-domain-permission-toggle can only be called from a background page');
    }
    if (globalOptions) {
        throw new Error('webext-domain-permission-toggle can only be initialized once');
    }
    const { name, optional_permissions: optionalPermissions } = chrome.runtime.getManifest();
    globalOptions = {
        title: `Enable ${name} on this domain`,
        reloadOnSuccess: false,
        ...options,
    };
    if (globalOptions.reloadOnSuccess === true) {
        globalOptions.reloadOnSuccess = `Do you want to reload this page to apply ${name}?`;
    }
    if (!chrome.contextMenus) {
        throw new Error('webext-domain-permission-toggle requires the `contextMenu` permission');
    }
    const optionalHosts = optionalPermissions === null || optionalPermissions === void 0 ? void 0 : optionalPermissions.filter(permission => /<all_urls>|\*/.test(permission));
    if (!optionalHosts || optionalHosts.length === 0) {
        throw new TypeError('webext-domain-permission-toggle some wildcard hosts to be specified in `optional_permissions`');
    }
    chrome.contextMenus.remove(contextMenuId, () => chrome.runtime.lastError);
    chrome.contextMenus.create({
        id: contextMenuId,
        type: 'checkbox',
        checked: false,
        title: globalOptions.title,
        contexts: ['page_action', 'browser_action'],
        // Note: This is completely ignored by Chrome and Safari. Great. #14
        documentUrlPatterns: optionalHosts,
    });
    chrome.contextMenus.onClicked.addListener(handleClick);
    chrome.tabs.onActivated.addListener(handleTabActivated);
    chrome.tabs.onUpdated.addListener(async (tabId, { status }, { url, active }) => {
        var _a;
        if (active && status === 'complete') {
            void updateItem((_a = url !== null && url !== void 0 ? url : await getTabUrl(tabId)) !== null && _a !== void 0 ? _a : '');
        }
    });
}
