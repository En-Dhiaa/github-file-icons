import chromeP from 'webext-polyfill-kinda';
function castArray(possibleArray) {
    if (Array.isArray(possibleArray)) {
        return possibleArray;
    }
    return [possibleArray];
}
export async function executeFunction(target, function_, ...args) {
    const { frameId, tabId } = typeof target === 'object' ? target : {
        tabId: target,
        frameId: 0,
    };
    const [result] = await chromeP.tabs.executeScript(tabId, {
        code: `(${function_.toString()})(...${JSON.stringify(args)})`,
        frameId,
    });
    return result;
}
export async function injectContentScript(target, scripts) {
    var _a, _b;
    const { frameId, tabId } = typeof target === 'object' ? target : {
        tabId: target,
        frameId: 0,
    };
    const injections = [];
    for (const script of castArray(scripts)) {
        for (const file of (_a = script.css) !== null && _a !== void 0 ? _a : []) {
            injections.push(chromeP.tabs.insertCSS(tabId, {
                file,
                frameId,
                runAt: script.run_at,
                allFrames: script.all_frames,
                matchAboutBlank: script.match_about_blank,
            }));
        }
        for (const file of (_b = script.js) !== null && _b !== void 0 ? _b : []) {
            injections.push(chromeP.tabs.executeScript(tabId, {
                file,
                frameId,
                runAt: script.run_at,
                allFrames: script.all_frames,
                matchAboutBlank: script.match_about_blank,
            }));
        }
    }
    await Promise.all(injections);
}
